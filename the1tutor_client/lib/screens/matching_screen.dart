import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../providers/app_state.dart';

class MatchingScreen extends StatefulWidget {
  const MatchingScreen({super.key});

  @override
  State<MatchingScreen> createState() => _MatchingScreenState();
}

class _MatchingScreenState extends State<MatchingScreen> {
  String? selectedLevel; // HL/SL ÏÑ†ÌÉù
  String? selectedCategory;
  String? selectedSubject;
  String? selectedTutorStyle;
  List<String> selectedTimeSlots = [];
  
  final TextEditingController learningGoalController = TextEditingController();
  final TextEditingController motivationController = TextEditingController();

  // 1Îã®Í≥Ñ: Î†àÎ≤® ÏÑ†ÌÉù
  final List<String> levels = ['HL', 'SL'];

  // 2Îã®Í≥Ñ: Í≥ºÎ™© Ïπ¥ÌÖåÍ≥†Î¶¨
  final List<String> subjectCategories = [
    'Mathematics',
    'Sciences', 
    'Languages',
    'Humanities',
    'Arts'
  ];

  // 3Îã®Í≥Ñ: ÏÑ∏Î∂Ä Í≥ºÎ™© (Î†àÎ≤®Í≥º Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê Îî∞Îùº Í≤∞Ï†ï)
  Map<String, Map<String, List<String>>> get detailedSubjects => {
    'Mathematics': {
      'HL': ['Mathematics Analysis and Approaches HL', 'Mathematics Applications and Interpretation HL'],
      'SL': ['Mathematics Analysis and Approaches SL', 'Mathematics Applications and Interpretation SL'],
    },
    'Sciences': {
      'HL': ['Physics HL', 'Chemistry HL', 'Biology HL', 'Computer Science HL'],
      'SL': ['Physics SL', 'Chemistry SL', 'Biology SL', 'Computer Science SL'],
    },
    'Languages': {
      'HL': ['English A: Literature HL', 'English A: Language and Literature HL', 'Korean A: Literature HL'],
      'SL': ['English A: Literature SL', 'English A: Language and Literature SL', 'Korean A: Literature SL', 'English B SL'],
    },
    'Humanities': {
      'HL': ['History HL', 'Geography HL', 'Economics HL', 'Psychology HL'],
      'SL': ['History SL', 'Geography SL', 'Economics SL', 'Psychology SL'],
    },
    'Arts': {
      'HL': ['Visual Arts HL', 'Music HL', 'Theatre HL'],
      'SL': ['Visual Arts SL', 'Music SL', 'Theatre SL'],
    },
  };

  // ÌäúÌÑ∞ ÏÑ±Ìñ• ÏòµÏÖò
  final List<Map<String, String>> tutorStyles = [
    {
      'id': 'friendly',
      'title': 'üòä ÏπúÍ∑ºÌïòÍ≥† Ìé∏ÏïàÌïú Î∂ÑÏúÑÍ∏∞',
      'description': 'Î∂ÄÎã¥ ÏóÜÏù¥ ÏßàÎ¨∏ÌïòÍ≥† ÏÜåÌÜµÌï† Ïàò ÏûàÎäî ÌäúÌÑ∞'
    },
    {
      'id': 'systematic',
      'title': 'üìö Ï≤¥Í≥ÑÏ†ÅÏù¥Í≥† ÍººÍººÌïú ÏßÄÎèÑ',
      'description': 'Í≥ÑÌöçÏ†ÅÏù¥Í≥† Îã®Í≥ÑÎ≥ÑÎ°ú Ï≤¥Í≥ÑÏ†ÅÏúºÎ°ú Í∞ÄÎ•¥ÏπòÎäî ÌäúÌÑ∞'
    },
    {
      'id': 'creative',
      'title': 'üí° Ï∞ΩÏùòÏ†ÅÏù¥Í≥† Ïú†Ïó∞Ìïú Î∞©Ïãù',
      'description': 'Îã§ÏñëÌïú Î∞©Î≤ïÏúºÎ°ú Ïû¨ÎØ∏ÏûàÍ≤å Í∞ÄÎ•¥ÏπòÎäî ÌäúÌÑ∞'
    },
  ];

  bool get isFormValid =>
      selectedSubject != null &&
      learningGoalController.text.isNotEmpty &&
      selectedTutorStyle != null &&
      selectedTimeSlots.isNotEmpty &&
      motivationController.text.isNotEmpty;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Í≥ºÏô∏ Îß§Ïπ≠ Ïã†Ï≤≠'),
        backgroundColor: Colors.orange.shade500,
        foregroundColor: Colors.white,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // 1. Í≥ºÎ™© ÏÑ†ÌÉù
            _buildSubjectSelection(),
            const SizedBox(height: 24),
            
            // 2. ÏàòÏóÖÎ∞õÍ≥†Ïã∂ÏùÄ Î∂ÄÎ∂Ñ
            _buildLearningGoalSection(),
            const SizedBox(height: 24),
            
            // 3. ÌäúÌÑ∞ ÏÑ±Ìñ• ÏÑ†ÌÉù
            _buildTutorStyleSection(),
            const SizedBox(height: 24),
            
            // 4. ÏàòÏóÖ Î∞©Ïãù (Í≥†Ï†ï)
            _buildClassMethodSection(),
            const SizedBox(height: 24),
            
            // 5. ÏàòÏóÖ ÏãúÍ∞ÑÎåÄ
            _buildTimeSlotSection(),
            const SizedBox(height: 24),
            
            // 6. Ïã†Ï≤≠ÎèôÍ∏∞
            _buildMotivationSection(),
            const SizedBox(height: 32),
            
            // Îß§Ïπ≠Ïã†Ï≤≠ÌïòÍ∏∞ Î≤ÑÌäº
            _buildSubmitButton(),
          ],
        ),
      ),
    );
  }

  Widget _buildSubjectSelection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '1. Í≥ºÎ™© ÏÑ†ÌÉù',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 12),
        Container(
          height: 200,
          decoration: BoxDecoration(
            border: Border.all(color: Colors.grey.shade300),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Row(
            children: [
              // 1Îã®Í≥Ñ: HL/SL Î†àÎ≤®
              Expanded(
                flex: 1,
                child: Container(
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    borderRadius: const BorderRadius.only(
                      topLeft: Radius.circular(12),
                      bottomLeft: Radius.circular(12),
                    ),
                    border: Border(
                      right: BorderSide(color: Colors.grey.shade300, width: 1),
                    ),
                  ),
                  child: Column(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: Colors.orange.shade50,
                          border: Border(
                            bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                          ),
                        ),
                        child: const Text(
                          'Î†àÎ≤®',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 12,
                          ),
                        ),
                      ),
                      Expanded(
                        child: ListView(
                          children: levels.map((level) {
                            final isSelected = selectedLevel == level;
                            return ListTile(
                              dense: true,
                              title: Text(
                                level,
                                style: TextStyle(
                                  fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                                  color: isSelected ? Colors.orange.shade700 : Colors.black,
                                  fontSize: 14,
                                ),
                              ),
                              selected: isSelected,
                              selectedTileColor: Colors.orange.shade100,
                              onTap: () {
                                setState(() {
                                  selectedLevel = level;
                                  selectedCategory = null;
                                  selectedSubject = null;
                                });
                              },
                            );
                          }).toList(),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              // 2Îã®Í≥Ñ: Ïπ¥ÌÖåÍ≥†Î¶¨
              Expanded(
                flex: 2,
                child: Container(
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    border: Border(
                      right: BorderSide(color: Colors.grey.shade300, width: 1),
                    ),
                  ),
                  child: Column(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: Colors.orange.shade50,
                          border: Border(
                            bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                          ),
                        ),
                        child: const Text(
                          'Ïπ¥ÌÖåÍ≥†Î¶¨',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 12,
                          ),
                        ),
                      ),
                      Expanded(
                        child: selectedLevel == null
                            ? const Center(
                                child: Text(
                                  'Î†àÎ≤®ÏùÑ Î®ºÏ†Ä\nÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî',
                                  textAlign: TextAlign.center,
                                  style: TextStyle(color: Colors.grey, fontSize: 12),
                                ),
                              )
                            : ListView(
                                children: subjectCategories.map((category) {
                                  final isSelected = selectedCategory == category;
                                  return ListTile(
                                    dense: true,
                                    title: Text(
                                      category,
                                      style: TextStyle(
                                        fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                                        color: isSelected ? Colors.orange.shade700 : Colors.black,
                                        fontSize: 13,
                                      ),
                                    ),
                                    selected: isSelected,
                                    selectedTileColor: Colors.orange.shade100,
                                    onTap: () {
                                      setState(() {
                                        selectedCategory = category;
                                        selectedSubject = null;
                                      });
                                    },
                                  );
                                }).toList(),
                              ),
                      ),
                    ],
                  ),
                ),
              ),
              // 3Îã®Í≥Ñ: ÏÑ∏Î∂Ä Í≥ºÎ™©
              Expanded(
                flex: 3,
                child: Container(
                  decoration: const BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.only(
                      topRight: Radius.circular(12),
                      bottomRight: Radius.circular(12),
                    ),
                  ),
                  child: Column(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: Colors.orange.shade50,
                          borderRadius: const BorderRadius.only(
                            topRight: Radius.circular(12),
                          ),
                          border: Border(
                            bottom: BorderSide(color: Colors.grey.shade300, width: 1),
                          ),
                        ),
                        child: const Text(
                          'ÏÑ∏Î∂Ä Í≥ºÎ™©',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 12,
                          ),
                        ),
                      ),
                      Expanded(
                        child: selectedLevel == null || selectedCategory == null
                            ? const Center(
                                child: Text(
                                  'Î†àÎ≤®Í≥º Ïπ¥ÌÖåÍ≥†Î¶¨Î•º\nÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî',
                                  textAlign: TextAlign.center,
                                  style: TextStyle(color: Colors.grey, fontSize: 12),
                                ),
                              )
                            : ListView(
                                children: (detailedSubjects[selectedCategory!]?[selectedLevel!] ?? []).map((subject) {
                                  final isSelected = selectedSubject == subject;
                                  return ListTile(
                                    dense: true,
                                    title: Text(
                                      subject,
                                      style: TextStyle(
                                        fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                                        color: isSelected ? Colors.orange.shade700 : Colors.black,
                                        fontSize: 12,
                                      ),
                                    ),
                                    selected: isSelected,
                                    selectedTileColor: Colors.orange.shade100,
                                    onTap: () {
                                      setState(() {
                                        selectedSubject = subject;
                                      });
                                    },
                                  );
                                }).toList(),
                              ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
        if (selectedSubject != null) ...[
          const SizedBox(height: 8),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.orange.shade50,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.orange.shade200),
            ),
            child: Row(
              children: [
                Icon(Icons.check_circle, color: Colors.orange.shade600),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    'ÏÑ†ÌÉùÎêú Í≥ºÎ™©: $selectedSubject',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.orange.shade700,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ],
    );
  }

  Widget _buildLearningGoalSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '2. ÏàòÏóÖÎ∞õÍ≥†Ïã∂ÏùÄ Î∂ÄÎ∂Ñ',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 12),
        TextField(
          controller: learningGoalController,
          maxLines: 3,
          decoration: InputDecoration(
            hintText: 'Ïñ¥Îñ§ Î∂ÄÎ∂ÑÏùÑ Ï§ëÏ†êÏ†ÅÏúºÎ°ú Î∞∞Ïö∞Í≥† Ïã∂ÏùÄÏßÄ ÏûêÏÑ∏Ìûà Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî\nÏòà: ÎØ∏Ï†ÅÎ∂Ñ Í∏∞Ï¥à Í∞úÎÖêÎ∂ÄÌÑ∞ Î¨∏Ï†ú ÌíÄÏù¥ÍπåÏßÄ',
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Colors.orange.shade500),
            ),
          ),
          onChanged: (value) => setState(() {}),
        ),
      ],
    );
  }

  Widget _buildTutorStyleSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '3. ÏÑ†Ìò∏ÌïòÎäî ÌäúÌÑ∞ ÏÑ±Ìñ•',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 12),
        Column(
          children: tutorStyles.map((style) {
            final isSelected = selectedTutorStyle == style['id'];
            return Container(
              margin: const EdgeInsets.only(bottom: 12),
              child: InkWell(
                onTap: () {
                  setState(() {
                    selectedTutorStyle = style['id'];
                  });
                },
                child: Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    border: Border.all(
                      color: isSelected ? Colors.orange.shade500 : Colors.grey.shade300,
                      width: isSelected ? 2 : 1,
                    ),
                    borderRadius: BorderRadius.circular(12),
                    color: isSelected ? Colors.orange.shade50 : null,
                  ),
                  child: Row(
                    children: [
                      Radio<String>(
                        value: style['id']!,
                        groupValue: selectedTutorStyle,
                        onChanged: (value) {
                          setState(() {
                            selectedTutorStyle = value;
                          });
                        },
                        activeColor: Colors.orange.shade500,
                      ),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              style['title']!,
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 16,
                                color: isSelected ? Colors.orange.shade700 : Colors.black,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              style['description']!,
                              style: TextStyle(
                                color: isSelected ? Colors.orange.shade600 : Colors.grey.shade600,
                                fontSize: 14,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            );
          }).toList(),
        ),
      ],
    );
  }

  Widget _buildClassMethodSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '4. ÏàòÏóÖ Î∞©Ïãù',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 12),
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.blue.shade50,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.blue.shade200),
          ),
          child: Row(
            children: [
              Icon(Icons.videocam, color: Colors.blue.shade600),
              const SizedBox(width: 12),
              const Text(
                'Ï§åÏóêÏÑú Ïò®ÎùºÏù∏ÏúºÎ°ú ÏßÑÌñâÌï©ÎãàÎã§',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildTimeSlotSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '5. Í∞ÄÎä•Ìïú ÏàòÏóÖ ÏãúÍ∞ÑÎåÄ',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 12),
        ElevatedButton(
          onPressed: () => _showTimeSlotSelector(),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.purple.shade500,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(Icons.schedule),
              const SizedBox(width: 8),
              const Text(
                'ÏãúÍ∞ÑÎåÄ Í≥†Î•¥Í∏∞',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
              ),
            ],
          ),
        ),
        if (selectedTimeSlots.isNotEmpty) ...[
          const SizedBox(height: 12),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.purple.shade50,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.purple.shade200),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'ÏÑ†ÌÉùÎêú ÏãúÍ∞ÑÎåÄ:',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.purple.shade700,
                  ),
                ),
                const SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  runSpacing: 4,
                  children: selectedTimeSlots.map((timeSlot) {
                    return Chip(
                      label: Text(timeSlot),
                      backgroundColor: Colors.purple.shade100,
                      labelStyle: TextStyle(color: Colors.purple.shade700),
                    );
                  }).toList(),
                ),
              ],
            ),
          ),
        ],
      ],
    );
  }

  Widget _buildMotivationSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '6. Ïã†Ï≤≠ÎèôÍ∏∞',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 12),
        TextField(
          controller: motivationController,
          maxLines: 4,
          decoration: InputDecoration(
            hintText: 'Í≥ºÏô∏Î•º Î∞õÍ≥†Ïã∂ÏùÄ Ïù¥Ïú†ÎÇò Î™©ÌëúÎ•º ÏûêÏÑ∏Ìûà Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî\nÏòà: ÎÇ¥ÎÖÑ IB ÏãúÌóòÏùÑ ÎåÄÎπÑÌïòÏó¨ Ï≤¥Í≥ÑÏ†ÅÏúºÎ°ú Ï§ÄÎπÑÌïòÍ≥† Ïã∂ÏäµÎãàÎã§',
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Colors.orange.shade500),
            ),
          ),
          onChanged: (value) => setState(() {}),
        ),
      ],
    );
  }

  Widget _buildSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: isFormValid ? _submitMatchingRequest : null,
        style: ElevatedButton.styleFrom(
          backgroundColor: isFormValid ? Colors.orange.shade500 : Colors.grey.shade300,
          foregroundColor: Colors.white,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          elevation: isFormValid ? 2 : 0,
        ),
        child: Text(
          'Îß§Ïπ≠Ïã†Ï≤≠ÌïòÍ∏∞',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: isFormValid ? Colors.white : Colors.grey.shade500,
          ),
        ),
      ),
    );
  }

  void _showTimeSlotSelector() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return TimeSlotSelectorDialog(
          selectedTimeSlots: selectedTimeSlots,
          onTimeSlotsChanged: (newTimeSlots) {
            setState(() {
              selectedTimeSlots = newTimeSlots;
            });
          },
        );
      },
    );
  }

  void _submitMatchingRequest() async {
    final appState = Provider.of<AppState>(context, listen: false);
    
    print('=== Îß§Ïπ≠ ÏöîÏ≤≠ ÏãúÏûë ===');
    print('ÏÑ†ÌÉùÎêú Í≥ºÎ™©: $selectedSubject');
    print('ÌïôÏäµ Î™©Ìëú: ${learningGoalController.text}');
    print('ÏÑ†ÌÉùÎêú ÌäúÌÑ∞ Ïä§ÌÉÄÏùº ID: $selectedTutorStyle');
    print('ÏÑ†ÌÉùÎêú ÏãúÍ∞ÑÎåÄ: $selectedTimeSlots');
    print('Ïã†Ï≤≠ ÎèôÍ∏∞: ${motivationController.text}');
    
    // Î°úÎî© Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return const AlertDialog(
          content: Row(
            children: [
              CircularProgressIndicator(),
              SizedBox(width: 16),
              Text('Îß§Ïπ≠ ÏöîÏ≤≠ÏùÑ ÏÉùÏÑ±ÌïòÎäî Ï§ë...'),
            ],
          ),
        );
      },
    );
    
    try {
      // ÌäúÌÑ∞ Ïä§ÌÉÄÏùº Ï†úÎ™© Ï∞æÍ∏∞
      final tutorStyleTitle = tutorStyles.firstWhere(
        (style) => style['id'] == selectedTutorStyle
      )['title']!;
      
      print('Î≥ÄÌôòÎêú ÌäúÌÑ∞ Ïä§ÌÉÄÏùº: $tutorStyleTitle');
      
      print('=== API Ìò∏Ï∂ú ÏãúÏûë ===');
      print('AppState.createMatchRequest Ìò∏Ï∂ú Ï§ë...');
      
      // Ïã§Ï†ú API Ìò∏Ï∂ú
      await appState.createMatchRequest(
        subject: selectedSubject!,
        learningGoal: learningGoalController.text,
        tutorStyle: tutorStyleTitle,
        classMethod: 'Ïò®ÎùºÏù∏', // Í≥†Ï†ïÍ∞í
        selectedTimeSlots: selectedTimeSlots,
        motivation: motivationController.text,
      );
      
      print('=== API Ìò∏Ï∂ú ÏÑ±Í≥µ ===');
      print('ÏÑúÎ≤ÑÏóêÏÑú ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îß§Ïπ≠ ÏöîÏ≤≠Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.');
      
      // Î°úÎî© Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
      Navigator.of(context).pop();
      
      // ÏÑ±Í≥µ Î©îÏãúÏßÄ ÌëúÏãú
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Row(
              children: [
                Icon(Icons.check_circle, color: Colors.green),
                const SizedBox(width: 8),
                const Text('Îß§Ïπ≠ ÏöîÏ≤≠ ÏôÑÎ£å'),
              ],
            ),
            content: Text('${selectedSubject!} Í≥ºÏô∏ Îß§Ïπ≠ ÏöîÏ≤≠Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§!\n\nÍ≥ß ÏµúÏ†ÅÏùò ÌäúÌÑ∞Í∞Ä Îß§Ïπ≠Îê† ÏòàÏ†ïÏûÖÎãàÎã§.'),
            actions: [
              ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  // ÌïôÏÉù ÌôàÏúºÎ°ú Ïù¥Îèô
                  context.go('/student');
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                ),
                child: const Text(
                  'ÌôïÏù∏',
                  style: TextStyle(color: Colors.white),
                ),
              ),
            ],
          );
        },
      );
    } catch (e) {
      // Î°úÎî© Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
      Navigator.of(context).pop();
      
      print('=== API Ìò∏Ï∂ú Ïã§Ìå® ===');
      print('ÏóêÎü¨ ÌÉÄÏûÖ: ${e.runtimeType}');
      print('ÏóêÎü¨ Î©îÏãúÏßÄ: $e');
      print('Ïä§ÌÉù Ìä∏Î†àÏù¥Ïä§: ${StackTrace.current}');
      
      // ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Row(
              children: [
                Icon(Icons.error, color: Colors.red),
                const SizedBox(width: 8),
                const Text('Îß§Ïπ≠ ÏöîÏ≤≠ Ïã§Ìå®'),
              ],
            ),
            content: Text('Îß§Ïπ≠ ÏöîÏ≤≠ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.\n\nÏò§Î•ò ÎÇ¥Ïö©: ${e.toString().replaceAll('Exception: ', '')}'),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('ÌôïÏù∏'),
              ),
            ],
          );
        },
      );
    }
  }
}

class TimeSlotSelectorDialog extends StatefulWidget {
  final List<String> selectedTimeSlots;
  final Function(List<String>) onTimeSlotsChanged;

  const TimeSlotSelectorDialog({
    super.key,
    required this.selectedTimeSlots,
    required this.onTimeSlotsChanged,
  });

  @override
  State<TimeSlotSelectorDialog> createState() => _TimeSlotSelectorDialogState();
}

class _TimeSlotSelectorDialogState extends State<TimeSlotSelectorDialog> {
  final List<String> weekdays = ['Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†', 'Ïùº'];
  final List<String> timeSlots = [];
  List<String> selectedSlots = [];

  @override
  void initState() {
    super.initState();
    selectedSlots = List.from(widget.selectedTimeSlots);
    
    // 30Î∂Ñ Í∞ÑÍ≤©ÏúºÎ°ú ÏãúÍ∞ÑÎåÄ ÏÉùÏÑ± (09:00 ~ 23:30, 00:00 ~ 03:30)
    // 09:00 ~ 23:30
    for (int hour = 9; hour <= 23; hour++) {
      timeSlots.add('${hour.toString().padLeft(2, '0')}:00');
      timeSlots.add('${hour.toString().padLeft(2, '0')}:30');
    }
    
    // 00:00 ~ 03:30 (Îã§ÏùåÎÇ† ÏÉàÎ≤Ω)
    for (int hour = 0; hour <= 3; hour++) {
      timeSlots.add('${hour.toString().padLeft(2, '0')}:00');
      timeSlots.add('${hour.toString().padLeft(2, '0')}:30');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      child: Container(
        width: MediaQuery.of(context).size.width * 0.9,
        height: MediaQuery.of(context).size.height * 0.8,
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            Row(
              children: [
                const Text(
                  'Í∞ÄÎä•Ìïú Î™®Îì† ÏàòÏóÖ ÏãúÍ∞ÑÎåÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî',
                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                ),
                const Spacer(),
                IconButton(
                  onPressed: () => Navigator.of(context).pop(),
                  icon: const Icon(Icons.close),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Expanded(
              child: SingleChildScrollView(
                child: SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: DataTable(
                    columns: [
                      const DataColumn(label: Text('ÏãúÍ∞Ñ')),
                      ...weekdays.map((day) => DataColumn(label: Text(day))),
                    ],
                    rows: timeSlots.map((time) {
                      return DataRow(
                        cells: [
                          DataCell(Text(time)),
                          ...weekdays.map((day) {
                            final slotId = '$day $time';
                            final isSelected = selectedSlots.contains(slotId);
                            return DataCell(
                              GestureDetector(
                                onTap: () {
                                  setState(() {
                                    if (isSelected) {
                                      selectedSlots.remove(slotId);
                                    } else {
                                      selectedSlots.add(slotId);
                                    }
                                  });
                                },
                                child: Container(
                                  width: 40,
                                  height: 30,
                                  decoration: BoxDecoration(
                                    color: isSelected ? Colors.purple.shade500 : Colors.grey.shade200,
                                    borderRadius: BorderRadius.circular(4),
                                  ),
                                  child: isSelected
                                      ? const Icon(Icons.check, color: Colors.white, size: 16)
                                      : null,
                                ),
                              ),
                            );
                          }),
                        ],
                      );
                    }).toList(),
                  ),
                ),
              ),
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                TextButton(
                  onPressed: () {
                    setState(() {
                      selectedSlots.clear();
                    });
                  },
                  child: const Text('Ï†ÑÏ≤¥ Ìï¥Ï†ú'),
                ),
                ElevatedButton(
                  onPressed: () {
                    widget.onTimeSlotsChanged(selectedSlots);
                    Navigator.of(context).pop();
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.purple.shade500,
                  ),
                  child: const Text(
                    'ÌôïÏù∏',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
} 